#!/bin/bash

# --- Generated by parse-options.sh. Begin.
_new_arguments=()

while [[ $# -gt 0 ]]; do
    case "$1" in
        --help|-h) help=1; shift ;;
        --digitalocean-credentials=*|-D=*) digitalocean_credentials="${1#*=}"; shift ;;
        --digitalocean-credentials|-D) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then digitalocean_credentials="$2"; shift; fi; shift ;;
        --domain=*|-d=*) domain+=("${1#*=}"); shift ;;
        --domain|-d) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then domain+=("$2"); shift; fi; shift ;;
        --ip-address=*|-I=*) ip_address="${1#*=}"; shift ;;
        --ip-address|-I) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then ip_address="$2"; shift; fi; shift ;;
        --letsencrypt=*|-L=*) letsencrypt="${1#*=}"; shift ;;
        --letsencrypt|-L) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then letsencrypt="$2"; shift; else letsencrypt=1; fi; shift ;;
        --nginx-config-filename=*) nginx_config_filename="${1#*=}"; shift ;;
        --nginx-config-filename) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then nginx_config_filename="$2"; shift; fi; shift ;;
        --web-root=*) web_root="${1#*=}"; shift ;;
        --web-root) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then web_root="$2"; shift; fi; shift ;;
        --[^-]*) shift ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done

set -- "${_new_arguments[@]}"

_new_arguments=()

while [[ $# -gt 0 ]]; do
    case "$1" in
        -[^-]*) OPTIND=1
            while getopts ":hD:d:I:L:" opt; do
                case $opt in
                    h) help=1 ;;
                    D) digitalocean_credentials="$OPTARG" ;;
                    d) domain+=("$OPTARG") ;;
                    I) ip_address="$OPTARG" ;;
                    L) letsencrypt="$OPTARG" ;;
                    :)
                        case $OPTARG in
                            L) letsencrypt=1 ;;
                        esac
                        ;;
                esac
            done
            shift "$((OPTIND-1))"
            ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done

set -- "${_new_arguments[@]}"

unset _new_arguments
# --- Generated by parse-options.sh. End.

if [ -n "$help" ];then
    cat <<'EOF'
Gak Pake Lama Nginx Static

Usage:
  gpl-nginx-static.sh <domain>
  gpl-nginx-static.sh example.com -d example.org -d example.net
  gpl-nginx-static.sh test.com \
    -d test.local -D <(cat ~/.token-digitalocean.txt) -L digitalocean -I auto

Options:
  -h --help                   Show this help.
  -d --domain                 Add other domain to nginx server_name directive.
  --web-root                  Set web root. If value is not absolute path,
                              it means relative to `/var/www/`. If omit, default
                              to `/var/www/project/<domain>/web`.
  --nginx-config-filename     Set the filename which will be create inside
                              `/etc/nginx/sites-available/`. If omit, default
                              to `/etc/nginx/sites-available/<domain>`.
  -D --digitalocean-credentials
                              Text file that contains token string which used
                              to access Digitalocean API.
  -L --letsencrypt[=<value>]  Use letsencrypt to setup TLS/SSL for HTTPS.
                              Available value is:
                              - `digitalocean`
  -I --ip-address=(<ip_address>|auto)]
                              Set IP Address if you wish create DNS Record
                              for domain. Set `auto` to automatically cek
                              IP from your server.
EOF
    exit 1
fi

# Common function.
red() { echo -ne "\e[91m"; echo -n "$@"; echo -e "\e[39m"; }
green() { echo -ne "\e[92m"; echo -n "$@"; echo -e "\e[39m"; }
yellow() { echo -ne "\e[93m"; echo -n "$@"; echo -e "\e[39m"; }
blue() { echo -ne "\e[94m"; echo -n "$@"; echo -e "\e[39m"; }
magenta() { echo -ne "\e[95m"; echo -n "$@"; echo -e "\e[39m"; }
x() { exit 1; }
e() { echo "$@"; }
_() { echo -n "$@"; }
__() { echo -n '    '; [ -n "$1" ] && echo "$@" || echo -n ; }
____() { echo; }

# Argument.
_domain="$1"
if [ -z "$_domain" ];then
    read -p "<domain>: " _domain
fi
[ -n "$_domain" ] || { red "Argument <domain> required."; x; }
[[ $_domain = *" "* ]] && { red "Argument <domain> can not contain space."; x; }
[ -n "$_domain" ] && {
    if ! grep -q -P '(?=^.{5,254}$)(^(?:(?!\d+\.)[a-zA-Z0-9_\-]{1,63}\.?)+(?:[a-zA-Z]{2,})$)' <<< "$_domain";then
        red "Argument <domain> contains invalid characters."; x
    fi
}

# Populate value.
domains=("${domain[@]}")
domain="$_domain"
[ -n "$web_root" ] || { web_root='/var/www/project/'$domain'/web'; }
[[ "${web_root:0:1}" == '/' ]] || {
    web_root="/var/www/${web_root}"
}
if [ -n "$digitalocean_credentials" ];then
    digitalocean_credentials=$(<"$digitalocean_credentials")
fi
if [ "$ip_address" == 'auto' ];then
    ip_address=$(wget -T 3 -t 1 -4qO- "http://ip1.dynupdate.no-ip.com/")
    [ -n "$ip_address" ] || { red "The value of ip_address failed to autopopulate."; x; }
fi
[ -n "$nginx_config_filename" ] || { nginx_config_filename=$domain; }
[[ $nginx_config_filename = *" "* ]] && { red "The value of --nginx-config-filename can not contain space."; x; }
nginx_config_filename_safe_value=$(sed -E 's|[^-.a-zA-Z0-9]|_|g' <<< "$nginx_config_filename" | sed -E 's|_+|_|g' )
if [[ ! $nginx_config_filename == $nginx_config_filename_safe_value ]];then
    red "The value of --nginx-config-filename contains invalid characters."
    red "Name suggestion: "$nginx_config_filename_safe_value; x
fi
if [[ -n "$digitalocean_credentials" && -z "$ip_address" ]];then
    magenta ip_address="$ip_address"
    red "Using API DigitalOcean DNS required \$ip_address value."; x
fi

blue '######################################################################'
blue '#                                                                    #'
blue '# Gak Pake Lama Nginx Static                                         #'
blue '#                                                                    #'
blue '######################################################################'
____

e Version 0.1.0
____

yellow -- START -------------------------------------------------------------
____

yellow User variable.
magenta domain="$domain"
[ ${#domains[@]} -gt 0 ] && {
    _value=
    for (( i=0; i < ${#domains[@]} ; i++ )); do
        _value+=" \"${domains[$i]}\""
    done
    magenta 'domains=('${_value:1}')'
} || {
    magenta 'domains=()'
}
magenta web_root="$web_root"
magenta nginx_config_filename="$nginx_config_filename"
magenta letsencrypt="$letsencrypt"
magenta digitalocean_credentials="$digitalocean_credentials"
magenta ip_address="$ip_address"
____

MAILBOX_HOST=postmaster

yellow Define variable.
magenta 'MAILBOX_HOST="'$MAILBOX_HOST'"'
____

yellow Mengecek akses root.
if [[ "$EUID" -ne 0 ]]; then
	red This script needs to be run with superuser privileges.; exit
else
    __ Privileges.
fi
____

aptinstalled=$(apt --installed list 2>/dev/null)

downloadApplication() {
    yellow Melakukan instalasi aplikasi "$@".
    local aptnotfound=
    for i in "$@"; do
        if ! grep -q "^$i/" <<< "$aptinstalled";then
            aptnotfound+=" $i"
        fi
    done
    if [ -n "$aptnotfound" ];then
        __ Menginstal.
        magenta apt install -y"$aptnotfound"
        apt install -y $aptnotfound
        aptinstalled=$(apt --installed list 2>/dev/null)
    else
        __ Aplikasi sudah terinstall seluruhnya.
    fi
}

validateApplication() {
    local aptnotfound=
    for i in "$@"; do
        if ! grep -q "^$i/" <<< "$aptinstalled";then
            aptnotfound+=" $i"
        fi
    done
    if [ -n "$aptnotfound" ];then
        __; red Gagal menginstall aplikasi:"$aptnotfound"; exit
    fi
}

application=
application+=' sudo php curl'
downloadApplication $application
validateApplication $application;
____

yellow Mengecek apakah nginx installed.
notfound=
if grep -q "^nginx/" <<< "$aptinstalled";then
    __ nginx installed.
else
    __ nginx not found.
    notfound=1
fi
____

if [ -n "$notfound" ];then
    yellow Menginstall nginx
    magenta apt install nginx -y
    apt install nginx -y
    aptinstalled=$(apt --installed list 2>/dev/null)
    if grep -q "^nginx/" <<< "$aptinstalled";then
        __; green nginx installed.
    else
        __; red nginx not found.; exit
    fi
    ____
fi

yellow Mengecek direktori web-root '`'$web_root'`'.
notfound=
if [ -d $web_root ] ;then
    __ Direktori ditemukan.
else
    __ Direktori tidak ditemukan.
    notfound=1
fi
____

if [ -n "$notfound" ];then
    yellow Membuat direktori web-root.
    magenta mkdir -p $web_root
    mkdir -p $web_root
    if [ -d $web_root ] ;then
        __; green Direktori berhasil dibuat.
    else
        __; red Direktori gagal dibuat.; exit
    fi
    ____
fi

yellow Memastikan command exists
__ sudo nginx php curl
command -v "sudo" >/dev/null || { red "sudo command not found."; exit 1; }
command -v "nginx" >/dev/null || { red "nginx command not found."; exit 1; }
command -v "php" >/dev/null || { red "php command not found."; exit 1; }
command -v "curl" >/dev/null || { red "curl command not found."; exit 1; }
____

yellow Mencari informasi nginx.
conf_path=$(nginx -V 2>&1 | grep -o -P -- '--conf-path=\K(\S+)')
magenta conf_path="$conf_path"
user_nginx=$(cat "$conf_path" | grep -o -P 'user\s+\K([^;]+)')
magenta user_nginx="$user_nginx"
____

yellow Memastikan web-root dapat diakses.
tweak=
if [ $(stat "$web_root" -c %G) == "$user_nginx" ];then
    __ Directory '`'$web_root'`' bagian dari Group '`'$user_nginx'`'.
else
    __ Directory '`'$web_root'`' bukan bagian dari Group '`'$user_nginx'`'.
    tweak=1
fi
if [ -n "$tweak" ];then
    chown -R root:$user_nginx "$web_root"
    if [ $(stat --cached=never "$web_root" -c %G) == "$user_nginx" ];then
        __; green Directory '`'$web_root'`' bagian dari Group '`'$user_nginx'`'.
    else
        __; red Directory '`'$web_root'`' bukan bagian dari Group '`'$user_nginx'`'.;x
    fi
fi
tweak=
if [[ $(stat "$web_root" -c %a) == 775 ]];then
    __ Directory  '`'$web_root'`' memiliki permission '`'775'`'.
else
    __ Directory  '`'$web_root'`' tidak memiliki permission '`'775'`'.
    tweak=1
fi
if [ -n "$tweak" ];then
    chmod 775 "$web_root"
    if [[ $(stat --cached=never "$web_root" -c %a) == 775 ]];then
        __; green Directory  '`'$web_root'`' memiliki permission '`'775'`'.
    else
        __; red Directory  '`'$web_root'`' tidak memiliki permission '`'775'`'.; x
    fi
fi
____

pregQuote() {
    local string="$1"
    # karakter dot (.), menjadi slash dot (\.)
    sed "s/\./\\\./g" <<< "$string"
}

yellow Mengecek nginx configuration.
config_path=/etc/nginx/sites-available/$nginx_config_filename
# Memastikan bahwa informasi root dan server_name sesuai
# dengan yang diinginkan user.
reload=
notfound=
string="$web_root"
string_quoted=$(pregQuote "$string")
if [ ! -f "$config_path" ];then
    notfound=1
elif ! grep  -E "^\s*root\s+${string_quoted}\s*;" "$config_path";then
    notfound=1
fi

magenta config_path="$config_path"
magenta web_root="$web_root"
magenta notfound="$notfound"
____

backupFile() {
    local mode="$1"
    local oldpath="$2" i newpath
    i=1
    newpath="${oldpath}.${i}"
    if [ -f "$newpath" ]; then
        let i++
        newpath="${oldpath}.${i}"
        while [ -f "$newpath" ] ; do
            let i++
            newpath="${oldpath}.${i}"
        done
    fi
    case $mode in
        move)
            mv "$oldpath" "$newpath" ;;
        copy)
            local user=$(stat -c "%U" "$oldpath")
            local group=$(stat -c "%G" "$oldpath")
            cp "$oldpath" "$newpath"
            chown ${user}:${group} "$newpath"
    esac
}

fileMustExists() {
    if [ -f "$1" ];then
        __; green File '`'$(basename "$1")'`' ditemukan.
    else
        __; red File '`'$(basename "$1")'`' tidak ditemukan.; x
    fi
}

if [ -n "$notfound" ];then
    yellow Membuat nginx config.
    if [ -f "$config_path" ];then
        __ Backup file "$config_path"
        backupFile move "$config_path"
    fi
    cat <<'EOF' > "$config_path"
server {
    listen 80;
    listen [::]:80;
    root WEB_ROOT;
    index index.html;
    autoindex off;
    server_name DOMAIN;
    location / {
        try_files $uri $uri/ =404;
    }
}
EOF
    sudo -u $user_nginx HOME='/tmp' -s touch "${web_root}/index.html"
    sed -i "s|WEB_ROOT|${web_root}|g" "$config_path"
    sed -i "s|DOMAIN|${domain}|g" "$config_path"
    cd /etc/nginx/sites-enabled/
    ln -sf ../sites-available/$nginx_config_filename
    reload=1
    fileMustExists "$config_path"
    ____
fi

yellow Mengecek domain di nginx config.
allsite=("$domain" "${domains[@]}")
for string in "${allsite[@]}" ;do
    notfound=
    string_quoted=$(pregQuote "$string")
    if grep -q -E "^\s*server_name\s+.*$string_quoted.*;\s*$" "$config_path";then
        __ Domain "$string" sudah terdapat pada file config.
    else
        __ Domain "$string" belum terdapat pada file config.
        notfound=1
    fi
    if [ -n "$notfound" ];then
        sed -i -E "s/server_name([^;]+);/server_name\1 "${string}";/" "$config_path"
        if grep -q -E "^\s*server_name\s+.*$string_quoted.*;\s*$" "$config_path";then
            __; green Domain "$string" sudah terdapat pada file config.
            reload=1
        else
            __; red Domain "$string" belum terdapat pada file config.; exit
        fi
    fi
done
____

if [ -n "$reload" ];then
    yellow Reload nginx configuration.
    if nginx -t 2> /dev/null;then
        magenta nginx -s reload
        nginx -s reload
        sleep 1
    else
        red Terjadi kesalahan konfigurasi nginx. Gagal reload nginx.; x
    fi
    ____
fi

yellow Mengecek HTTP Response Code.
magenta curl http://127.0.0.1 -H '"'Host: ${domain}'"'
code=$(curl -L \
    -o /dev/null -s -w "%{http_code}\n" \
    http://127.0.0.1 -H "Host: ${domain}")
[ $code -eq 200 ] && {
    __ HTTP Response code '`'$code'`' '('Required')'.
} || {
    __; red Terjadi kesalahan. HTTP Response code '`'$code'`'.; x
}
____

isDomainExists() {
    local domain=$1 code
    local dumpfile=$2
    [ -z "$dumpfile" ] && dumpfile=$(mktemp -t digitalocean.XXXXXX)
    magenta "curl https://api.digitalocean.com/v2/domains/$domain"
    code=$(curl -X GET \
        -H "Authorization: Bearer $digitalocean_credentials" \
        -o "$dumpfile" -s -w "%{http_code}\n" \
        "https://api.digitalocean.com/v2/domains/$domain")
    sleep .5 # Delay
    json=$(<"$dumpfile")
    json_pretty=$(php -r "echo json_encode(json_decode(fgets(STDIN)), JSON_PRETTY_PRINT).PHP_EOL;" <<< "$json")
    magenta "$json_pretty"
    if [[ $code == 200 ]];then
        return 0
    elif [[ $code == 404 ]];then
        return 1
    fi
    red Unexpected result with response code: $code.; x
}

insertDomain() {
    local domain="$1" ip="$2" reference code
    local dumpfile="$3"
    [ -z "$dumpfile" ] && dumpfile=$(mktemp -t digitalocean.XXXXXX)
    reference="$(php -r "echo json_encode([
        'name' => '$domain',
        'ip_address' => '$ip',
    ]);")"
    magenta "curl -X POST -d '$reference' https://api.digitalocean.com/v2/domains/"
    code=$(curl -X POST \
        -H "Authorization: Bearer $digitalocean_credentials" \
        -H "Content-Type: application/json" \
        -o "$dumpfile" -s -w "%{http_code}\n" \
        -d "$reference" \
        "https://api.digitalocean.com/v2/domains")
    sleep .5 # Delay
    json=$(<"$dumpfile")
    json_pretty=$(php -r "echo json_encode(json_decode(fgets(STDIN)), JSON_PRETTY_PRINT).PHP_EOL;" <<< "$json")
    magenta "$json_pretty"
    if [[ $code == 201 ]];then
        return 0
    fi
    red Unexpected result with response code: $code.; x
}

insertRecord() {
    local type="$1" domain="$2" name="$3" reference code
    local data="$4"
    local dumpfile="$5"
    [ -z "$dumpfile" ] && dumpfile=$(mktemp -t digitalocean.XXXXXX)
    local priority=NULL
    [[ $type == 'MX' ]] && priority=10
    reference="$(php -r "echo json_encode([
        'type' => '$type',
        'name' => '$name',
        'data' => '$data',
        'priority' => $priority,
        'port' => NULL,
        'ttl' => 1800,
        'weight' => NULL,
        'flags' => NULL,
        'tag' => NULL,
    ]);")"
    magenta "curl -X POST -d '$reference' https://api.digitalocean.com/v2/domains/records"
    code=$(curl -X POST \
        -H "Authorization: Bearer $digitalocean_credentials" \
        -H "Content-Type: application/json" \
        -o "$dumpfile" -s -w "%{http_code}\n" \
        -d "$reference" \
        "https://api.digitalocean.com/v2/domains/$domain/records")
    sleep .5 # Delay
    json=$(<"$dumpfile")
    json_pretty=$(php -r "echo json_encode(json_decode(fgets(STDIN)), JSON_PRETTY_PRINT).PHP_EOL;" <<< "$json")
    magenta "$json_pretty"
    if [[ $code == 201 ]];then
        return 0
    fi
    red Unexpected result with response code: $code.; x
}

isRecordExist() {
    local type="$1" php json json_pretty
    local domain="$2"
    local name="$3"
    local data="$4"
    local dumpfile="$5"
    [ -z "$dumpfile" ] && dumpfile=$(mktemp -t digitalocean.XXXXXX)
    magenta "curl https://api.digitalocean.com/v2/domains/$domain/records?type=$type&name=$name"
    code=$(curl -X GET \
        -o "$dumpfile" -s -w "%{http_code}\n" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $digitalocean_credentials" \
        "https://api.digitalocean.com/v2/domains/$domain/records?type=$type&name=$name")
    sleep .5 # Delay
    json=$(<"$dumpfile")
    json_pretty=$(php -r "echo json_encode(json_decode(fgets(STDIN)), JSON_PRETTY_PRINT).PHP_EOL;" <<< "$json")
    magenta "$json_pretty"
    if [[ ! $code == 200 ]];then
        red Unexpected result with response code: $code.; x
    fi
    php=$(cat <<-'EOF'
$object = json_decode(fgets(STDIN));
$data = $_SERVER['argv'][1];
if (is_object($object) && isset($object->domain_records)) {
    foreach ($object->domain_records as $domain_record) {
        if ($domain_record->data == $data) {
            exit(0);
        }
    }
}
exit(1);
EOF
)
    php -r "$php" "$data" <<< "$json"
    return $?
}

if [[ -n "$domain" && -n "$digitalocean_credentials" && -n "$ip_address" ]];then
    yellow Modify DNS Record for Domain '`'${domain}'`'
    if isDomainExists $domain;then
        __ Domain '`'"$domain"'`' found in DNS Digital Ocean.
    elif insertDomain $domain $ip_address;then
        __; green Domain '`'"$domain"'`' created in DNS Digital Ocean.
    fi
    ____

    yellow Modify A DNS Record for Domain '`'${domain}'`'
    if isRecordExist A $domain $domain $ip_address;then
        __ DNS A Record of '`'${domain}'`' point to IP '`'${ip_address}'`' found in DNS Digital Ocean.
    elif insertRecord A $domain '@' $ip_address;then
        __; green DNS A Record of '`'${domain}'`' point to IP '`'${ip_address}'`' created in DNS Digital Ocean.
    fi
    ____
fi

if [[ -n "$domain" && -n "$letsencrypt" ]];then
    aptinstalled=$(apt --installed list 2>/dev/null)

    yellow Mengecek apakah snap installed.
    notfound=
    if grep -q "^snapd/" <<< "$aptinstalled";then
        __ Snap installed.
    else
        __ Snap not found.
        notfound=1
    fi
    ____

    if [ -n "$notfound" ];then
        yellow Menginstall snap
        magenta apt install snapd -y
        apt install snapd -y
        aptinstalled=$(apt --installed list 2>/dev/null)
        if grep -q "^snapd/" <<< "$aptinstalled";then
            __; green Snap installed.
        else
            __; red Snap not found.; exit
        fi
        ____
    fi

    command -v "snap" >/dev/null || {
        [ -f /etc/profile.d/apps-bin-path.sh ] && . /etc/profile.d/apps-bin-path.sh
    }

    yellow Mengecek apakah snap core installed.
    notfound=
    if grep '^core\s' <<< $(snap list core);then
        __ Snap core installed.
    else
        __ Snap core not found.
        notfound=1
    fi
    ____

    if [ -n "$notfound" ];then
        yellow Menginstall snap core
        magenta snap install core
        magenta snap refresh core
        snap install core
        snap refresh core
        if grep '^core\s' <<< $(snap list core);then
            __; green Snap core installed.
        else
            __; red Snap core not found.; x
        fi
        ____
    fi

    yellow Mengecek apakah snap certbot installed.
    notfound=
    if grep '^certbot\s' <<< $(snap list certbot);then
        __ Snap certbot installed.
    else
        __ Snap certbot not found.
        notfound=1
    fi
    ____

    if [ -n "$notfound" ];then
        yellow Menginstall snap certbot
        magenta snap install --classic certbot
        snap install --classic certbot
        snap set certbot trust-plugin-with-root=ok
        if grep '^certbot\s' <<< $(snap list certbot);then
            __; green Snap certbot installed.
        else
            __; red Snap certbot not found.; x
        fi
        ____
    fi

    # @todo, jika tidak dengan dns gimana?
    yellow Mengecek apakah snap certbot-dns-digitalocean installed.
    notfound=
    if grep '^certbot-dns-digitalocean\s' <<< $(snap list certbot-dns-digitalocean);then
        __ Snap certbot-dns-digitalocean installed.
    else
        __ Snap certbot-dns-digitalocean not found.
        notfound=1
    fi
    ____

    if [ -n "$notfound" ];then
        yellow Menginstall snap certbot-dns-digitalocean
        magenta snap install certbot-dns-digitalocean
        magenta snap refresh certbot
        snap install certbot-dns-digitalocean
        snap refresh certbot
        if grep '^certbot-dns-digitalocean\s' <<< $(snap list certbot-dns-digitalocean);then
            __; green Snap certbot-dns-digitalocean installed.
        else
            __; red Snap certbot-dns-digitalocean not found.; x
        fi
        ____
    fi

    yellow Mengecek '$PATH'
    magenta PATH="$PATH"
    notfound=
    if grep -q '/snap/bin' <<< "$PATH";then
      __ '$PATH' sudah lengkap.
    else
      __ '$PATH' belum lengkap.
      notfound=1
    fi
    ____

    if [[ -n "$notfound" ]];then
        yellow Memperbaiki '$PATH'
        PATH=/snap/bin:$PATH
        if grep -q '/snap/bin' <<< "$PATH";then
          __; green '$PATH' sudah lengkap.
          __; magenta PATH="$PATH"

        else
          __; red '$PATH' belum lengkap.; x
        fi
        ____
    fi

    if [[ ! "$letsencrypt" == 'digitalocean' ]];then
        red Currently not available letsencrypt self DNS resolver.;
    fi
    if [[ "$letsencrypt" == 'digitalocean' && -z "$digitalocean_credentials" ]];then
        red Lets encrypt require Digital Ocean API Token.;
    fi
    if [[ "$letsencrypt" == 'digitalocean' && -n "$digitalocean_credentials" ]];then
        yellow Certbot Request for '`'$domain'`'
        if [ -d /etc/letsencrypt/live/"$domain" ];then
            __ Certificate berada pada direktori '`'/etc/letsencrypt/live/$domain/'`'
        else
            __ Save DigitalOcean Token as File
            mktemp=$(mktemp -t digitalocean.XXXXXX.ini)
            chmod 0700 "$mktemp"
            cat << EOF > "$mktemp"
dns_digitalocean_token = $digitalocean_credentials
EOF
            __; fileMustExists "$mktemp"
            __; magenta certbot -i nginx -d "$domain"
            certbot -i nginx \
               -n --agree-tos --email "${MAILBOX_HOST}@${domain}" \
               --dns-digitalocean \
               --dns-digitalocean-credentials "$mktemp" \
               -d "$domain"
            __ Cleaning File Temporary
            __; magenta rm "$mktemp"
            rm "$mktemp"
        fi
        ____
    fi
fi

yellow -- FINISH ------------------------------------------------------------
____

exit 0

parse-options.sh \
--without-end-options-double-dash \
--compact \
--clean \
--no-hash-bang \
--no-original-arguments \
--no-error-invalid-options \
--no-error-require-arguments << EOF | clip
FLAG=(
'--help|-h'
)
VALUE=(
'--digitalocean-credentials|-D'
'--ip-address|-I'
--web-root
--nginx-config-filename
)
FLAG_VALUE=(
'--letsencrypt|-L'
)
MULTIVALUE=(
'--domain|-d'
)
EOF
