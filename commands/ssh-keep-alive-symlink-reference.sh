#!/bin/bash

# Prerequisite.
[ -f "$0" ] || { echo -e "\e[91m" "Cannot run as dot command. Hit Control+c now." "\e[39m"; read; exit 1; }

# Parse arguments. Generated by parse-options.sh
_new_arguments=()
_n=
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help|-h) help=1; shift ;;
        --version|-v) version=1; shift ;;
        --daemon) daemon=1; shift ;;
        --tunnel) tunnel=1; shift ;;
        --)
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    *) _new_arguments+=("$1"); shift ;;
                esac
            done
            ;;
        --[^-]*) shift ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        -[^-]*) OPTIND=1
            while getopts ":hv" opt; do
                case $opt in
                    h) help=1 ;;
                    v) version=1 ;;
                esac
            done
            _n="$((OPTIND-1))"
            _n=${!_n}
            shift "$((OPTIND-1))"
            if [[ "$_n" == '--' ]];then
                while [[ $# -gt 0 ]]; do
                    case "$1" in
                        *) _new_arguments+=("$1"); shift ;;
                    esac
                done
            fi
            ;;
        --) shift
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    *) _new_arguments+=("$1"); shift ;;
                esac
            done
            ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments
unset _n

# Operand.
timeout_trigger_command="$1"; shift

# Functions.
printVersion() {
    echo '0.1.0'
}
printHelp() {
    cat << 'EOF'
Usage: ssh-keep-alive-symlink-reference.sh [timeout_trigger_command] [options]

Options:
   --daemon ^
        Argument that effect to `command-keep-alive.sh` command.
   --tunnel ^
        Argument that effect to `ssh-command-generator.sh` command.

Global Options:
   --version
        Print version of this script.
   --help
        Show this help.

Dependency:
   ssh-keep-alive.sh

Download:
   [ssh-keep-alive.sh](https://github.com/ijortengab/bash/raw/master/commands/ssh-keep-alive.sh)
EOF
}

# Help and Version.
[ -n "$version" ] && { printVersion; exit 1; }
[ -n "$help" ] && { printHelp; exit 1; }

# Dependency.
while IFS= read -r line; do
    command -v "${line}" >/dev/null || { echo -e "\e[91m""Unable to proceed, ${line} command not found." "\e[39m"; exit 1; }
done <<< `printHelp | sed -n '/^Dependency:/,$p' | sed -n '2,/^$/p' | sed 's/^ *//g'`

# Functions.
resolve_relative_path() (
    # Credit: https://www.baeldung.com/linux/bash-expand-relative-path
    # Info: https://github.com/ijortengab/bash/blob/master/commands/resolve-relative-path.sh
    if [ -d "$1" ]; then
        cd "$1" || return 1
        pwd
    elif [ -e "$1" ]; then
        if [ ! "${1%/*}" = "$1" ]; then
            cd "${1%/*}" || return 1
        fi
        echo "$(pwd)/${1##*/}"
    else
        return 1
    fi
)

# Require, validate, and populate value.
__FILE__=$(resolve_relative_path "$0")
__DIR__=$(dirname "$__FILE__")
if [[ ! -h "$__FILE__" ]];then
    echo -e "\e[91m""Cannot execute. Please create a symbolic link that reference of this file.""\e[39m";
    exit 1;
fi
basename=$(basename "$__FILE__")
extension="${basename##*.}"
filename="${basename%.*}"
if [[ "$filename" == 'ssh-keep-alive-symlink-reference' ]];then
    echo -e "\e[91m""Cannot execute. Please create a symbolic link that reference of this file.""\e[39m";
    exit 1;
fi
pattern="$filename"
pid_file="${filename}.pid"
[ -n "$daemon" ] && isdaemon='--daemon ' || isdaemon=''
[ -n "$tunnel" ] && istunnel='--tunnel ' || istunnel=''
ssh-keep-alive.sh $isdaemon $istunnel "$pattern" "$pid_file" "$timeout_trigger_command"

# parse-options.sh \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# '--version|-v'
# '--help|-h'
# --daemon
# --tunnel
# )
# VALUE=(
# )
# MULTIVALUE=(
# )
# FLAG_VALUE=(
# )
# CSV=(
# )
# EOF
# clear
